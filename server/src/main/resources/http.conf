akka.http {
  server {

    # The default value of the `Server` header to produce if no
    # explicit `Server`-header was included in a response.
    # If this value is the empty string and no header was included in
    # the request, no `Server` header will be rendered at all.
    server-header = ""

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    idle-timeout = 60 seconds

    # Defines the default time period within which the application has to
    # produce an HttpResponse for any given HttpRequest it received.
    # The timeout begins to run when the *end* of the request has been
    # received, so even potentially long uploads can have a short timeout.
    # Set to `infinite` to completely disable request timeout checking.
    #
    # Make sure this timeout is smaller than the idle-timeout, otherwise,
    # the idle-timeout will kick in first and reset the TCP connection
    # without a response.
    #
    # If this setting is not `infinite` the HTTP server layer attaches a
    # `Timeout-Access` header to the request, which enables programmatic
    # customization of the timeout period and timeout response for each
    # request individually.
    request-timeout = 20 seconds

    # The time period within which the TCP binding process must be completed.
    bind-timeout = 1 second

    # The time period the HTTP server implementation will keep a connection open
    # after all data has been delivered to the network layer. This setting is
    # similar to the SO_LINGER socket option but does not only include the
    # OS-level socket but also covers the Akka IO / Akka Streams network stack.
    # The setting is an extra precaution that prevents clients from keeping open
    # a connection that is already considered completed from the server side.
    #
    # If the network level buffers (including the Akka Stream / Akka IO
    # networking stack buffers) contains more data than can be transferred to
    # the client in the given time when the server-side considers to be finished
    # with this connection, the client may encounter a connection reset.
    #
    # Set to 'infinite' to disable automatic connection closure (which will risk
    # to leak connections).
    linger-timeout = 1 min

    # Note, that this setting limits the number of the connections on a
    # best-effort basis. It does *not* strictly guarantee that the number of
    # established TCP connections will never exceed the limit (but it will be
    # approximately correct) because connection termination happens
    # asynchronously. It also does *not* guarantee that the number of
    # concurrently active handler flow materializations will never exceed the
    # limit for the reason that it is impossible to reliably detect when a
    # materialization has ended.
    max-connections = 1024

    # The maximum number of requests that are accepted (and dispatched to
    # the application) on one single connection before the first request
    # has to be completed.
    # Incoming requests that would cause the pipelining limit to be exceeded
    # are not read from the connections socket so as to build up "back-pressure"
    # to the client via TCP flow control.
    # A setting of 1 disables HTTP pipelining, since only one request per
    # connection can be "open" (i.e. being processed by the application) at any
    # time. Set to higher values to enable HTTP pipelining.
    # This value must be > 0 and <= 1024.
    pipelining-limit = 16

    # Enables/disables the addition of a `Remote-Address` header
    # holding the clients (remote) IP address.
    remote-address-header = off

    # Enables/disables the addition of a `Raw-Request-URI` header holding the
    # original raw request URI as the client has sent it.
    raw-request-uri-header = off

    # Enables/disables automatic handling of HEAD requests.
    # If this setting is enabled the server dispatches HEAD requests as GET
    # requests to the application and automatically strips off all message
    # bodies from outgoing responses.
    # Note that, even when this setting is off the server will never send
    # out message bodies on responses to HEAD requests.
    transparent-head-requests = on

    # The requested maximum length of the queue of incoming connections.
    # If the server is busy and the backlog is full the OS will start dropping
    # SYN-packets and connection attempts may fail. Note, that the backlog
    # size is usually only a maximum size hint for the OS and the OS can
    # restrict the number further based on global limits.
    backlog = 100

    websocket {
      # periodic keep alive may be implemented using by sending Ping frames
      # upon which the other side is expected to reply with a Pong frame,
      # or by sending a Pong frame, which serves as unidirectional heartbeat.
      # Valid values:
      #   ping - default, for bi-directional ping/pong keep-alive heartbeating
      #   pong - for uni-directional pong keep-alive heartbeating
      #
      # It is also possible to provide a payload for each heartbeat message,
      # this setting can be configured programatically by modifying the
      # websocket settings.
      # See: https://doc.akka.io/docs/akka-http/current/server-side/websocket-support.html
      periodic-keep-alive-mode = pong

      # Need to keep the socket alive for topics with low data rates.
      periodic-keep-alive-max-idle = 3 seconds
    }
  }
  client {
    # The default value of the `User-Agent` header to produce if no
    # explicit `User-Agent`-header was included in a request.
    # If this value is the empty string and no header was included in
    # the request, no `User-Agent` header will be rendered at all.
    user-agent-header = akka-http

    # The time period within which the TCP connecting process must be completed.
    connecting-timeout = 10s

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 60 s

    # The initial size of the buffer to render the request headers in.
    # Can be used for fine-tuning request rendering performance but probably
    # doesn't have to be fiddled with in most applications.
    request-header-size-hint = 512

    # Socket options to set for the listening socket. If a setting is left
    # undefined, it will use whatever the default on the system is.
    socket-options {
      so-receive-buffer-size = undefined
      so-send-buffer-size = undefined
      so-reuse-address = undefined
      so-traffic-class = undefined
      tcp-keep-alive = undefined
      tcp-oob-inline = undefined
      tcp-no-delay = undefined
    }

    # Client https proxy options. When using ClientTransport.httpsProxy() with
    # or without credentials, host/port must be either passed explicitly or set
    # here. If a host is not set, the proxy will not be used.
    proxy {
      https {
        host = ""
        port = 443
      }
    }

    # Modify to tweak parsing settings on the client-side only.
    parsing {
      # no overrides by default, see `akka.http.parsing` for default values

      # Default maximum content length which should not be exceeded by incoming
      # response entities. Can be changed at runtime (to a higher or lower
      # value) via the `HttpEntity::withSizeLimit` method. Note that it is not
      # necessarily a problem to set this to a high value as all stream
      # operations are always properly backpressured.
      #
      # On the client-side, this limit is disabled by default because a client
      # controls the requests it runs.
      #
      # Set to `infinite` to completely disable entity length checks. (Even then
      # you can still apply one programmatically via `withSizeLimit`.)
      max-content-length = infinite
    }

    # Enables/disables the logging of unencrypted HTTP traffic to and from the
    # HTTP client for debugging reasons.
    #
    # NOTE: Use with care. Logging of unencrypted data may expose sensitive data.
    #
    # Incoming and outgoing traffic will be logged in hexdump format. To enable
    # logging, specify the number of bytes to log per chunk of data (the actual
    # chunking depends on implementation details and networking conditions and
    # should be treated as arbitrary).
    #
    # For logging on the server side,
    # see: akka.http.server.log-unencrypted-network-bytes.
    #
    # `off` : no log messages are produced
    # Int   : determines how many bytes should be logged per data chunk
    log-unencrypted-network-bytes = off

    websocket {
      # periodic keep alive may be implemented using by sending Ping frames
      # upon which the other side is expected to reply with a Pong frame,
      # or by sending a Pong frame, which serves as unidirectional heartbeat.
      # Valid values:
      #   ping - default, for bi-directional ping/pong keep-alive heartbeating
      #   pong - for uni-directional pong keep-alive heartbeating
      #
      # See https://tools.ietf.org/html/rfc6455#section-5.5.2
      # and https://tools.ietf.org/html/rfc6455#section-5.5.3 for more info.
      periodic-keep-alive-mode = ping

      # Interval for sending periodic keep-alives
      # The frame sent will be the one configured in
      # akka.http.server.websocket.periodic-keep-alive-mode
      # `infinite` by default, or a duration that is the max idle interval after
      # which an keep-alive frame should be sent
      periodic-keep-alive-max-idle = 10 seconds
      periodic-keep-alive-max-idle = ${?WS_PROXY_SOCKET_KEEP_ALIVE_MAX_IDLE}
    }

    # Cancellation in the HTTP streams is delayed by this duration to prevent
    # race conditions between cancellation and stream completion / failure. In
    # most cases, the value chosen here should make no difference because HTTP
    # streams are loops where completion and failures should propagate
    # immediately and make the handling of cancellations redundant.
    #
    # In most cases, there should be no reason to change this setting.
    #
    # Set to 0 to disable the delay.
    stream-cancellation-delay = 100 millis
  }
}