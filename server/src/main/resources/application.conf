include "http.conf"
include "kafka.conf"

kafka.ws.proxy {
  server {
    server-id = 1
    server-id = ${?WSPROXY_SERVER_ID}
    port = 8078
    port = ${?WSPROXY_PORT}
    kafka-bootstrap-urls = ["localhost:29094"]
    kafka-bootstrap-urls = ${?WSPROXY_KAFKA_BOOTSTRAP_URLS}
    schema-registry-url = "http://localhost:28081"
    schema-registry-url = ${?WSPROXY_SCHEMA_REGISTRY_URL}
    auto-register-schemas = true
    auto-register-schemas = ${?WSPROXY_SCHEMA_AUTO_REGISTER}
  }

  kafka-security-properties {
    sasl.mechanism = PLAIN
    security.protocol = SASL_SSL
    ssl.truststore.location = /Users/kpm/Projects/gitlab/scalytica/kafka-websocket-proxy/docker/sasl-single-node/sasl_ssl/kafka.client.truststore.jks
    ssl.truststore.password = scalytica
    ssl.keystore.location = /Users/kpm/Projects/gitlab/scalytica/kafka-websocket-proxy/docker/sasl-single-node/sasl_ssl/kafka.client.keystore.jks
    ssl.keystore.password = scalytica
    ssl.key.password = scalytica
    sasl.jaas.config = """org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client";"""
    ssl.endpoint.identification.algorithm=""
  }

  admin-client {
    kafka-client-properties = ${kafka.ws.proxy.kafka-security-properties}
  }

  consumer {
    default-rate-limit = 0
    default-rate-limit = ${?WSPROXY_DEFAULT_RATE_LIMIT}
    default-batch-size = 0
    default-batch-size = ${?WSPROXY_DEFAULT_BATCH_SIZE}
    kafka-client-properties = ${kafka.ws.proxy.kafka-security-properties}
  }

  producer {
    kafka-client-properties = ${kafka.ws.proxy.kafka-security-properties}
  }

  session-handler {
    session-state-topic-name = "_wsproxy.session.state"
    session-state-topic-name = ${?WSPROXY_SESSION_STATE_TOPIC}
    session-state-replication-factor = 3
    session-state-replication-factor = ${?WSPROXY_SESSION_STATE_REPLICATION_FACTOR}
    session-state-retention = 30 days
    session-state-retention = ${?WSPROXY_SESSION_STATE_RETENTION}
  }

  # CommitHandler specific configurations
  commit-handler {
    # Defines how many uncommitted messages can be in the uncommitted stack.
    # When the size limit is reached, the oldest messages (older than
    # max-uncommitted-age) are dropped to make room for new messages.
    max-stack-size: 1000
    max-stack-size: ${?WSPROXY_CH_MAX_STACK_SIZE}
    # When enabled, triggers a periodic job to check the commit handler stack
    # for messages that are older than max-age. The newest of these uncommitted
    # messages will be committed, and the stack is cleaned up accordingly.
    auto-commit-enabled: false
    auto-commit-enabled: ${?WSPROXY_CH_AUTOCOMMIT_ENABLED}
    auto-commit-interval: 1 second
    auto-commit-interval: ${?WSPROXY_CH_AUTOCOMMIT_INTERVAL}
    # The max allowed age of uncommitted messages in the commit handler stack.
    # If `auto-commit-enabled` is `true`, the newest message of the messages
    # that are too old will be committed, and older messages are dropped. This
    # allows for keeping the stacks smaller.
    auto-commit-max-age: 20 seconds
    auto-commit-max-age: ${?WSPROXY_CH_AUTOCOMMIT_MAX_AGE}
  }
}

# The Actor system...
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters-during-shutdown = off
}