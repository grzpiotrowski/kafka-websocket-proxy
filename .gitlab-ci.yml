######################################################################
# GitLab CI build script for the Kafka WebSocket Proxy               #
######################################################################
image: registry.gitlab.com/kpmeen/docker-scala-sbt:scala_2.13_jdk11

variables:
  CI: "true"
  DOCKER_DRIVER: overlay
  # Setting specific folder for sbt-coursier to cache artifacts
  COURSIER_CACHE: "/root/cache/coursier"
  # Container scanning properties
  CS_MAJOR_VERSION: 2
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/server
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  # Static Application Security Testing properties
  SAST_JAVA_VERSION: 11
  SAST_EXCLUDED_PATHS: "target, */target, */src/test, website"
  SAST_DEFAULT_ANALYZERS: "spotbugs, kubesec, mobsf"
  SAST_EXCLUDED_ANALYZERS: "eslint, nodejs-scan"
  # Dependency scan properties
  DS_DEFAULT_ANALYZERS: "gemnasium-maven"

cache:
  untracked: true
  paths:
    - cache

stages:
  - site-build
  - site-deploy
  - test
  - publish-docker
  - scan

check style and formatting:
  stage: test
  tags:
    - docker
  script:
    # Ensure that the pipeline fails fast if there are issues with the
    # style or formatting
    - sbt clean scalastyle scalafmt
    - git diff --exit-code || (echo "ERROR Code formatting check failed, see differences above."; false)

run test suites:
  stage: test
  tags:
    - docker
  script:
    - sbt coverage test coverageReport
    - sbt coverageAggregate
  artifacts:
    paths:
      - target/
      - ./**/target/
    #      - target/scala-2.13/scoverage-report/
    #      - ./**/target/scala-2.13/scoverage-report/
    #      - ./**/target/test-reports/TEST-*.xml
    reports:
      junit: ./**/target/test-reports/TEST-*.xml

publish docker containers:
  stage: publish-docker
  tags:
    - docker
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker login -u kpmeen -p $DOCKERHUB_TOKEN
    - sbt docker:publish
  dependencies:
    - check style and formatting
    - run test suites
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_MERGE_REQUEST_ID'
      when: never

include:
  #  - template: SAST.gitlab-ci.yml
  #  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "false"

code_quality:
  artifacts:
    paths:
      - gl-code-quality-report.json

#dependency_scanning:
#  variables:
#    CI_DEBUG_TRACE: "true"
#    SBT_CLI_OPTS: "-Dsbt.coursier=false -Dsbt.ivy=true"
#  artifacts:
#    paths:
#      - gl-dependency-scanning-report.json


# To have the container scanning execute in the desired stage, the below is copied
# directly from https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
container_scanning:
  stage: scan
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:$CS_MAJOR_VERSION
  variables:
    # By default, use the latest clair vulnerabilities database, however, allow it to be overridden here with a specific image
    # to enable container scanning to run offline, or to provide a consistent list of vulnerabilities for integration testing purposes
    CLAIR_DB_IMAGE_TAG: "latest"
    CLAIR_DB_IMAGE: "arminc/clair-db:$CLAIR_DB_IMAGE_TAG"
    # Override the GIT_STRATEGY variable in your `.gitlab-ci.yml` file and set it to `fetch` if you want to provide a `clair-whitelist.yml`
    # file. See https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
    # for details
    GIT_STRATEGY: none
  allow_failure: true
  services:
    - name: $CLAIR_DB_IMAGE
      alias: clair-vulnerabilities-db
  script:
    - /analyzer run
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  dependencies:
    - publish docker containers
  rules:
    - if: '$CI_COMMIT_BRANCH'
      when: always
    - if: '$CI_MERGE_REQUEST_ID'
      when: never
    - if: '$GITLAB_FEATURES =~ /\bcontainer_scanning\b/'
      when: always
    - if: '$CONTAINER_SCANNING_DISABLED'
      when: never

################################################################################
# GitLab pages pipeline
################################################################################
site:build:
  stage: site-build
  tags:
    - docker
  script:
    - sbt docs/mdoc
  artifacts:
    paths:
      - kafka-websocket-proxy-docs/target
      - website
  only:
    refs:
      - master
    changes:
      - docs/**/*
      - kafka-websocket-proxy-docs/**/*
      - website/**/*

site:deploy:
  stage: site-deploy
  image: node:15.12-alpine3.13
  dependencies:
    - site:build
  script:
    - cd website
    - yarn install
    - yarn build
    - mv ./build ../public
  artifacts:
    paths:
      - public
  only:
    refs:
      - master
    changes:
      - docs/**/*
      - kafka-websocket-proxy-docs/**/*
      - website/**/*
