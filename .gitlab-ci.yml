######################################################################
# GitLab CI build script for the Kafka WebSocket Proxy               #
######################################################################
image: registry.gitlab.com/kpmeen/docker-scala-sbt:scala_2.12_jdk11

variables:
  CI: "true"
  DOCKER_DRIVER: overlay
  # Setting specific folder for sbt-coursier to cache artifacts
  COURSIER_CACHE: "/root/cache/coursier"
  # Container scanning properties
  CS_MAJOR_VERSION: 2
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/server
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  # Static Application Security Testing properties
  SAST_JAVA_VERSION: 11
  SAST_EXCLUDED_PATHS: target
#  # Dependency scan properties
#  DS_DEFAULT_ANALYZERS: "gemnasium-maven"

cache:
  untracked: true
  paths:
    - cache

stages:
  - test
  - publish-docker
  - scan

check style and formatting:
  stage: test
  tags:
    - docker
  script:
    # Ensure that the pipeline fails fast if there are issues with the
    # style or formatting
    - sbt clean scalastyle scalafmt
    - git diff --exit-code || (echo "ERROR Code formatting check failed, see differences above."; false)

run test suites:
  stage: test
  tags:
    - docker
  script:
    - sbt coverage test coverageReport
    - sbt coverageAggregate
  artifacts:
    paths:
      - target/scala-2.12/scoverage-report/
      - ./**/target/scala-2.12/scoverage-report/
      - ./**/target/test-reports/TEST-*.xml
    reports:
      junit: ./**/target/test-reports/TEST-*.xml

publish docker containers:
  stage: publish-docker
  tags:
    - docker
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker login -u kpmeen -p $DOCKERHUB_TOKEN
    - sbt docker:publish
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'
      when: always
    - if: '$CI_MERGE_REQUEST_ID'
      when: never

include:
  - template: SAST.gitlab-ci.yml
#  - template: Dependency-Scanning.gitlab-ci.yml

# To have the container scanning execute in the desired stage, the below is copied
# directly from https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
container_scanning:
  stage: scan
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:$CS_MAJOR_VERSION
  variables:
    # By default, use the latest clair vulnerabilities database, however, allow it to be overridden here with a specific image
    # to enable container scanning to run offline, or to provide a consistent list of vulnerabilities for integration testing purposes
    CLAIR_DB_IMAGE_TAG: "latest"
    CLAIR_DB_IMAGE: "arminc/clair-db:$CLAIR_DB_IMAGE_TAG"
    # Override the GIT_STRATEGY variable in your `.gitlab-ci.yml` file and set it to `fetch` if you want to provide a `clair-whitelist.yml`
    # file. See https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
    # for details
    GIT_STRATEGY: none
  allow_failure: true
  services:
    - name: $CLAIR_DB_IMAGE
      alias: clair-vulnerabilities-db
  script:
    - /analyzer run
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH'
      when: always
    - if: '$CI_MERGE_REQUEST_ID'
      when: never
    - if: '$GITLAB_FEATURES =~ /\bcontainer_scanning\b/'
      when: always
    - if: '$CONTAINER_SCANNING_DISABLED'
      when: never
